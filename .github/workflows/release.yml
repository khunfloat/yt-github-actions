name: Release

on:
  push:
    branches:
      - release

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      HUSKY: 0

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: release
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Set git user
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Overwrite release with dev
        run: |
          git fetch origin
          git reset --hard origin/dev
          git push origin release --force

      - name: Run standard-version
        run: |
          npx standard-version

      - name: Push changelog and version bump (no tag)
        run: git push origin release

  sync:
    needs: release
    runs-on: ubuntu-latest
    env:
      HUSKY: 0

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set git user
        run: |
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"

      - name: Fetch all branches
        run: git fetch --all

      - name: Merge release into main with tag
        run: |
          git checkout main
          git merge origin/release --no-ff -m "chore(release): merge from release into main"
          version=$(node -p "require('./package.json').version")
          git tag -a "v$version" -m "Release v$version"
          git push origin main
          git push origin "v$version"

      - name: Merge release into dev (no tag)
        run: |
          git checkout dev
          git merge origin/main --no-ff -m "chore(release): main from release into dev"
          git push origin dev

  build:
    needs: sync
    runs-on: ubuntu-latest
    env:
      HUSKY: 0

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Extract version from package.json
        id: get_version
        run: |
          version=$(node -p "require('./package.json').version")
          echo "VERSION=$version" >> $GITHUB_OUTPUT

      - name: Build and push Docker image to GHCR
        run: |
          IMAGE_URL=ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}/${{ github.event.repository.name }}
          docker build \
          --build-arg NEXT_PUBLIC_API_BASE=${{ secrets.NEXT_PUBLIC_API_BASE_PROD }} \
          --build-arg NEXT_PUBLIC_SECRET_KEY=${{ secrets.NEXT_PUBLIC_SECRET_KEY }} \
          --build-arg NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} \
          --build-arg NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL_PROD }} \
          --build-arg GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
          --build-arg GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} \
          -t $IMAGE_URL:v${{ steps.get_version.outputs.version }} \
          -t $IMAGE_URL:latest .

          docker push $IMAGE_URL:v${{ steps.get_version.outputs.version }}
          docker push $IMAGE_URL:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    env:
      HUSKY: 0

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy via SSH to DigitalOcean
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          script: |
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            IMAGE_URL=ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}/${{ github.event.repository.name }}
            docker stop ${{ github.event.repository.name }}-prod || true
            docker rm ${{ github.event.repository.name }}-prod || true
            docker image prune -a -f
            docker run -d --name ${{ github.event.repository.name }}-prod -p 5000:3000 \
            -e NEXT_PUBLIC_API_BASE=${{ secrets.NEXT_PUBLIC_API_BASE_PROD }} \
            -e NEXT_PUBLIC_SECRET_KEY=${{ secrets.NEXT_PUBLIC_SECRET_KEY }} \
            -e NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} \
            -e NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL_PROD }} \
            -e GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
            -e GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} \
            $IMAGE_URL:latest
